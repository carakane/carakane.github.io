I"ë<p>As we‚Äôve gotten farther into our exploration of Sinatra, many of the tests have been written using <a href="https://github.com/teamcapybara/capybara">Capybara</a>. The Capybara gem allows us to formulate tests that mimic how a user interacts with the DOM. These are known as ‚Äúintegration tests.‚Äù This adds a lot of functionality to our testing abilities because instead of just testing what is literally in the code, we can also test what the code actually creates. Capybara tests can mimic filling in forms, clicking buttons, navigating to pages, checking and unchecking buttons, and other user actions.</p>

<p>As our labs have added this new testing functionality, we‚Äôve learned how to read a new set of errors. Some of the errors are very straightforward‚Äîthe error might tell you that it‚Äôs looking for a certain phrase on the page and you realize that instead of writing <code class="language-plaintext highlighter-rouge">"Hello, World!"</code> you‚Äôve written <code class="language-plaintext highlighter-rouge">"Hello world."</code> Ok, that‚Äôs an easy fix, but other aspects of Capybara can be a little tricky because the tests are looking in very specific locations for very specific phrases. It can be frustrating to feel like the code you‚Äôve written is doing everything it needs to do in terms of functionality but is still not passing the Capybara tests! Based on my recent experience, the most important thing to keep in mind is that even though the Capybara library seems to contain a lot of magic, the errors it throws state explicitly what the tests are looking for. If the test wants to <code class="language-plaintext highlighter-rouge">fill_in "Bramble Berry Shortcake"</code> it is looking for an input field with an id or name attribute equal to that. If it wants to <code class="language-plaintext highlighter-rouge">click_on "Put on Sunscreen"</code> then that string should be the value of your submit button. The specificity of these search strings makes Capybara seem a little finicky, but it also allows us to utilize similar id‚Äôs or values and test for them independently. This expansion and specificity improves our test driven development!</p>
:ET